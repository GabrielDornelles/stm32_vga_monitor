
vga_adapter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b34  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002cf8  08002cf8  00012cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d10  08002d10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d18  08002d18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d18  08002d18  00012d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d1c  08002d1c  00012d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000000c  08002d2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002d2c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8aa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a13  00000000  00000000  0002b8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  0002d300  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  0002df18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b3d  00000000  00000000  0002ea58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008c41  00000000  00000000  00050595  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf72e  00000000  00000000  000591d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128904  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  00128980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002ce0 	.word	0x08002ce0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002ce0 	.word	0x08002ce0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fb00 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f814 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f8f0 	bl	80006f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f8c4 	bl	80006a0 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000518:	f000 f87a 	bl	8000610 <MX_TIM10_Init>
  MX_TIM11_Init();
 800051c:	f000 f89c 	bl	8000658 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  //uart_buf_len = sprintf(uart_buf, "Timer test\r\n");
  //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);

  HAL_TIM_Base_Start_IT(&htim10); // h sync
 8000520:	4803      	ldr	r0, [pc, #12]	; (8000530 <main+0x2c>)
 8000522:	f001 fb9e 	bl	8001c62 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11); // v sync
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <main+0x30>)
 8000528:	f001 fb9b 	bl	8001c62 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x28>
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028
 8000534:	20000068 	.word	0x20000068

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 031c 	add.w	r3, r7, #28
 8000542:	2234      	movs	r2, #52	; 0x34
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 fbc2 	bl	8002cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b29      	ldr	r3, [pc, #164]	; (8000608 <SystemClock_Config+0xd0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a28      	ldr	r2, [pc, #160]	; (8000608 <SystemClock_Config+0xd0>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b26      	ldr	r3, [pc, #152]	; (8000608 <SystemClock_Config+0xd0>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b23      	ldr	r3, [pc, #140]	; (800060c <SystemClock_Config+0xd4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xd4>)
 8000586:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005b0:	2348      	movs	r3, #72	; 0x48
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 f8c7 	bl	8001758 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d0:	f000 f94a 	bl	8000868 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	2102      	movs	r1, #2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fdf7 	bl	80011e4 <HAL_RCC_ClockConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005fc:	f000 f934 	bl	8000868 <Error_Handler>
  }
}
 8000600:	bf00      	nop
 8000602:	3750      	adds	r7, #80	; 0x50
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40023800 	.word	0x40023800
 800060c:	40007000 	.word	0x40007000

08000610 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_TIM10_Init+0x40>)
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <MX_TIM10_Init+0x44>)
 8000618:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_TIM10_Init+0x40>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_TIM10_Init+0x40>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2047;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_TIM10_Init+0x40>)
 8000628:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800062c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_TIM10_Init+0x40>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_TIM10_Init+0x40>)
 8000636:	2200      	movs	r2, #0
 8000638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <MX_TIM10_Init+0x40>)
 800063c:	f001 fae6 	bl	8001c0c <HAL_TIM_Base_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000646:	f000 f90f 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000028 	.word	0x20000028
 8000654:	40014400 	.word	0x40014400

08000658 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_TIM11_Init+0x40>)
 800065e:	4a0f      	ldr	r2, [pc, #60]	; (800069c <MX_TIM11_Init+0x44>)
 8000660:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 19;
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_TIM11_Init+0x40>)
 8000664:	2213      	movs	r2, #19
 8000666:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_TIM11_Init+0x40>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 63999;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_TIM11_Init+0x40>)
 8000670:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000674:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_TIM11_Init+0x40>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_TIM11_Init+0x40>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_TIM11_Init+0x40>)
 8000684:	f001 fac2 	bl	8001c0c <HAL_TIM_Base_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800068e:	f000 f8eb 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000068 	.word	0x20000068
 800069c:	40014800 	.word	0x40014800

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 fccc 	bl	8002074 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f8c1 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000a8 	.word	0x200000a8
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <MX_GPIO_Init+0x110>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a3c      	ldr	r2, [pc, #240]	; (8000804 <MX_GPIO_Init+0x110>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x110>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <MX_GPIO_Init+0x110>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a35      	ldr	r2, [pc, #212]	; (8000804 <MX_GPIO_Init+0x110>)
 8000730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <MX_GPIO_Init+0x110>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_GPIO_Init+0x110>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <MX_GPIO_Init+0x110>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_GPIO_Init+0x110>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_GPIO_Init+0x110>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a27      	ldr	r2, [pc, #156]	; (8000804 <MX_GPIO_Init+0x110>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_GPIO_Init+0x110>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	4822      	ldr	r0, [pc, #136]	; (8000808 <MX_GPIO_Init+0x114>)
 8000780:	f000 fcfc 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_CHANNEL_Pin|H_SYNC_Pin|V_SYNC_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2131      	movs	r1, #49	; 0x31
 8000788:	4820      	ldr	r0, [pc, #128]	; (800080c <MX_GPIO_Init+0x118>)
 800078a:	f000 fcf7 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_GPIO_Init+0x11c>)
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	481c      	ldr	r0, [pc, #112]	; (8000814 <MX_GPIO_Init+0x120>)
 80007a4:	f000 fb58 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a8:	2320      	movs	r3, #32
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0x114>)
 80007c0:	f000 fb4a 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_CHANNEL_Pin */
  GPIO_InitStruct.Pin = GREEN_CHANNEL_Pin;
 80007c4:	2301      	movs	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_CHANNEL_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_GPIO_Init+0x118>)
 80007dc:	f000 fb3c 	bl	8000e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : H_SYNC_Pin V_SYNC_Pin */
  GPIO_InitStruct.Pin = H_SYNC_Pin|V_SYNC_Pin;
 80007e0:	2330      	movs	r3, #48	; 0x30
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_GPIO_Init+0x118>)
 80007f8:	f000 fb2e 	bl	8000e58 <HAL_GPIO_Init>

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	; 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020400 	.word	0x40020400
 8000810:	10210000 	.word	0x10210000
 8000814:	40020800 	.word	0x40020800

08000818 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) // horizontal sync
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d107      	bne.n	800083a <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		HAL_GPIO_TogglePin(H_SYNC_GPIO_Port, H_SYNC_Pin);
 800082a:	2110      	movs	r1, #16
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800082e:	f000 fcbe 	bl	80011ae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(H_SYNC_GPIO_Port, H_SYNC_Pin);
 8000832:	2110      	movs	r1, #16
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000836:	f000 fcba 	bl	80011ae <HAL_GPIO_TogglePin>
	}


	if (htim->Instance == TIM11) // vertical sync
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d107      	bne.n	8000854 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		HAL_GPIO_TogglePin(V_SYNC_GPIO_Port, V_SYNC_Pin);
 8000844:	2120      	movs	r1, #32
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000848:	f000 fcb1 	bl	80011ae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(V_SYNC_GPIO_Port, V_SYNC_Pin);
 800084c:	2120      	movs	r1, #32
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000850:	f000 fcad 	bl	80011ae <HAL_GPIO_TogglePin>

	}

}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40014400 	.word	0x40014400
 8000860:	40020400 	.word	0x40020400
 8000864:	40014800 	.word	0x40014800

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b6:	2007      	movs	r0, #7
 80008b8:	f000 fa6a 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <HAL_TIM_Base_MspInit+0x80>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d116      	bne.n	8000908 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <HAL_TIM_Base_MspInit+0x84>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	4a1a      	ldr	r2, [pc, #104]	; (800094c <HAL_TIM_Base_MspInit+0x84>)
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_TIM_Base_MspInit+0x84>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2100      	movs	r1, #0
 80008fa:	2019      	movs	r0, #25
 80008fc:	f000 fa53 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000900:	2019      	movs	r0, #25
 8000902:	f000 fa6c 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000906:	e01a      	b.n	800093e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a10      	ldr	r2, [pc, #64]	; (8000950 <HAL_TIM_Base_MspInit+0x88>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d115      	bne.n	800093e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_TIM_Base_MspInit+0x84>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <HAL_TIM_Base_MspInit+0x84>)
 800091c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_TIM_Base_MspInit+0x84>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	201a      	movs	r0, #26
 8000934:	f000 fa37 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000938:	201a      	movs	r0, #26
 800093a:	f000 fa50 	bl	8000dde <HAL_NVIC_EnableIRQ>
}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40014400 	.word	0x40014400
 800094c:	40023800 	.word	0x40023800
 8000950:	40014800 	.word	0x40014800

08000954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <HAL_UART_MspInit+0x94>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d133      	bne.n	80009de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <HAL_UART_MspInit+0x98>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <HAL_UART_MspInit+0x98>)
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	6413      	str	r3, [r2, #64]	; 0x40
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <HAL_UART_MspInit+0x98>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_UART_MspInit+0x98>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a14      	ldr	r2, [pc, #80]	; (80009ec <HAL_UART_MspInit+0x98>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <HAL_UART_MspInit+0x98>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009ae:	230c      	movs	r3, #12
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009be:	2307      	movs	r3, #7
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <HAL_UART_MspInit+0x9c>)
 80009ca:	f000 fa45 	bl	8000e58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2026      	movs	r0, #38	; 0x26
 80009d4:	f000 f9e7 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009d8:	2026      	movs	r0, #38	; 0x26
 80009da:	f000 fa00 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	; 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40004400 	.word	0x40004400
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40020000 	.word	0x40020000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f8b2 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a56:	f001 f928 	bl	8001caa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000028 	.word	0x20000028

08000a64 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000a6a:	f001 f91e 	bl	8001caa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000068 	.word	0x20000068

08000a78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <USART2_IRQHandler+0x10>)
 8000a7e:	f001 fb47 	bl	8002110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000a8 	.word	0x200000a8

08000a8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <SystemInit+0x28>)
 8000a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a96:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <SystemInit+0x28>)
 8000a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0x28>)
 8000aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000abc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000abe:	e003      	b.n	8000ac8 <LoopCopyDataInit>

08000ac0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ac2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ac4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ac6:	3104      	adds	r1, #4

08000ac8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ac8:	480b      	ldr	r0, [pc, #44]	; (8000af8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000acc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ace:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ad0:	d3f6      	bcc.n	8000ac0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ad4:	e002      	b.n	8000adc <LoopFillZerobss>

08000ad6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ad6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ad8:	f842 3b04 	str.w	r3, [r2], #4

08000adc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ade:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ae0:	d3f9      	bcc.n	8000ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ae2:	f7ff ffd3 	bl	8000a8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae6:	f002 f8cf 	bl	8002c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aea:	f7ff fd0b 	bl	8000504 <main>
  bx  lr    
 8000aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000af4:	08002d20 	.word	0x08002d20
  ldr  r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000afc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b00:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b04:	200000ec 	.word	0x200000ec

08000b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC_IRQHandler>
	...

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f92b 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fe9a 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f943 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8c:	f000 f90b 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	20000008 	.word	0x20000008
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	200000e8 	.word	0x200000e8

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	200000e8 	.word	0x200000e8

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d004      	beq.n	8000e30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e00c      	b.n	8000e4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2205      	movs	r2, #5
 8000e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f022 0201 	bic.w	r2, r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	e165      	b.n	8001140 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e74:	2201      	movs	r2, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 8154 	bne.w	800113a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d00b      	beq.n	8000eb2 <HAL_GPIO_Init+0x5a>
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea6:	2b11      	cmp	r3, #17
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b12      	cmp	r3, #18
 8000eb0:	d130      	bne.n	8000f14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68da      	ldr	r2, [r3, #12]
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	091b      	lsrs	r3, r3, #4
 8000efe:	f003 0201 	and.w	r2, r3, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0xfc>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b12      	cmp	r3, #18
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	69b9      	ldr	r1, [r7, #24]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 80ae 	beq.w	800113a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b5c      	ldr	r3, [pc, #368]	; (8001154 <HAL_GPIO_Init+0x2fc>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a5b      	ldr	r2, [pc, #364]	; (8001154 <HAL_GPIO_Init+0x2fc>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b59      	ldr	r3, [pc, #356]	; (8001154 <HAL_GPIO_Init+0x2fc>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffa:	4a57      	ldr	r2, [pc, #348]	; (8001158 <HAL_GPIO_Init+0x300>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4e      	ldr	r2, [pc, #312]	; (800115c <HAL_GPIO_Init+0x304>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x21a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4d      	ldr	r2, [pc, #308]	; (8001160 <HAL_GPIO_Init+0x308>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x216>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <HAL_GPIO_Init+0x30c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x212>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4b      	ldr	r2, [pc, #300]	; (8001168 <HAL_GPIO_Init+0x310>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x20e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4a      	ldr	r2, [pc, #296]	; (800116c <HAL_GPIO_Init+0x314>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x20a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a49      	ldr	r2, [pc, #292]	; (8001170 <HAL_GPIO_Init+0x318>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x206>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a48      	ldr	r2, [pc, #288]	; (8001174 <HAL_GPIO_Init+0x31c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x202>
 8001056:	2306      	movs	r3, #6
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105a:	2307      	movs	r3, #7
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x21c>
 8001072:	2300      	movs	r3, #0
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001084:	4934      	ldr	r1, [pc, #208]	; (8001158 <HAL_GPIO_Init+0x300>)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001092:	4b39      	ldr	r3, [pc, #228]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b6:	4a30      	ldr	r2, [pc, #192]	; (8001178 <HAL_GPIO_Init+0x320>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <HAL_GPIO_Init+0x320>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <HAL_GPIO_Init+0x320>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e6:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_GPIO_Init+0x320>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110a:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_GPIO_Init+0x320>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <HAL_GPIO_Init+0x320>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3301      	adds	r3, #1
 800113e:	61fb      	str	r3, [r7, #28]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	f67f ae96 	bls.w	8000e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001148:	bf00      	nop
 800114a:	3724      	adds	r7, #36	; 0x24
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800
 8001158:	40013800 	.word	0x40013800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40021000 	.word	0x40021000
 8001170:	40021400 	.word	0x40021400
 8001174:	40021800 	.word	0x40021800
 8001178:	40013c00 	.word	0x40013c00

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	619a      	str	r2, [r3, #24]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	460b      	mov	r3, r1
 80011b8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	695a      	ldr	r2, [r3, #20]
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	401a      	ands	r2, r3
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d104      	bne.n	80011d2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	041a      	lsls	r2, r3, #16
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0cc      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011f8:	4b68      	ldr	r3, [pc, #416]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d90c      	bls.n	8001220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b63      	ldr	r3, [pc, #396]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0b8      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001238:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800125a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800125c:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	494d      	ldr	r1, [pc, #308]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	4313      	orrs	r3, r2
 800126c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d044      	beq.n	8001304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d119      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e07f      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d003      	beq.n	80012a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06f      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e067      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f023 0203 	bic.w	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4934      	ldr	r1, [pc, #208]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d4:	f7ff fc80 	bl	8000bd8 <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012dc:	f7ff fc7c 	bl	8000bd8 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e04f      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 020c 	and.w	r2, r3, #12
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	429a      	cmp	r2, r3
 8001302:	d1eb      	bne.n	80012dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d20c      	bcs.n	800132c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e032      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4916      	ldr	r1, [pc, #88]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800136a:	f000 f855 	bl	8001418 <HAL_RCC_GetSysClockFreq>
 800136e:	4601      	mov	r1, r0
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 800137c:	5cd3      	ldrb	r3, [r2, r3]
 800137e:	fa21 f303 	lsr.w	r3, r1, r3
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_RCC_ClockConfig+0x1c8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fbe0 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00
 80013a0:	40023800 	.word	0x40023800
 80013a4:	08002cf8 	.word	0x08002cf8
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000

080013c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013cc:	f7ff fff0 	bl	80013b0 <HAL_RCC_GetHCLKFreq>
 80013d0:	4601      	mov	r1, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	0a9b      	lsrs	r3, r3, #10
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08002d08 	.word	0x08002d08

080013f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013f4:	f7ff ffdc 	bl	80013b0 <HAL_RCC_GetHCLKFreq>
 80013f8:	4601      	mov	r1, r0
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	0b5b      	lsrs	r3, r3, #13
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	fa21 f303 	lsr.w	r3, r1, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	08002d08 	.word	0x08002d08

08001418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001432:	4bc6      	ldr	r3, [pc, #792]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b0c      	cmp	r3, #12
 800143c:	f200 817e 	bhi.w	800173c <HAL_RCC_GetSysClockFreq+0x324>
 8001440:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <HAL_RCC_GetSysClockFreq+0x30>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	0800147d 	.word	0x0800147d
 800144c:	0800173d 	.word	0x0800173d
 8001450:	0800173d 	.word	0x0800173d
 8001454:	0800173d 	.word	0x0800173d
 8001458:	08001483 	.word	0x08001483
 800145c:	0800173d 	.word	0x0800173d
 8001460:	0800173d 	.word	0x0800173d
 8001464:	0800173d 	.word	0x0800173d
 8001468:	08001489 	.word	0x08001489
 800146c:	0800173d 	.word	0x0800173d
 8001470:	0800173d 	.word	0x0800173d
 8001474:	0800173d 	.word	0x0800173d
 8001478:	080015e5 	.word	0x080015e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800147c:	4bb4      	ldr	r3, [pc, #720]	; (8001750 <HAL_RCC_GetSysClockFreq+0x338>)
 800147e:	613b      	str	r3, [r7, #16]
       break;
 8001480:	e15f      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001482:	4bb4      	ldr	r3, [pc, #720]	; (8001754 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001484:	613b      	str	r3, [r7, #16]
      break;
 8001486:	e15c      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001488:	4bb0      	ldr	r3, [pc, #704]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001490:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001492:	4bae      	ldr	r3, [pc, #696]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d04a      	beq.n	8001534 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149e:	4bab      	ldr	r3, [pc, #684]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	099b      	lsrs	r3, r3, #6
 80014a4:	f04f 0400 	mov.w	r4, #0
 80014a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	ea03 0501 	and.w	r5, r3, r1
 80014b4:	ea04 0602 	and.w	r6, r4, r2
 80014b8:	4629      	mov	r1, r5
 80014ba:	4632      	mov	r2, r6
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f04f 0400 	mov.w	r4, #0
 80014c4:	0154      	lsls	r4, r2, #5
 80014c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ca:	014b      	lsls	r3, r1, #5
 80014cc:	4619      	mov	r1, r3
 80014ce:	4622      	mov	r2, r4
 80014d0:	1b49      	subs	r1, r1, r5
 80014d2:	eb62 0206 	sbc.w	r2, r2, r6
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	f04f 0400 	mov.w	r4, #0
 80014de:	0194      	lsls	r4, r2, #6
 80014e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80014e4:	018b      	lsls	r3, r1, #6
 80014e6:	1a5b      	subs	r3, r3, r1
 80014e8:	eb64 0402 	sbc.w	r4, r4, r2
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	00e2      	lsls	r2, r4, #3
 80014f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80014fa:	00d9      	lsls	r1, r3, #3
 80014fc:	460b      	mov	r3, r1
 80014fe:	4614      	mov	r4, r2
 8001500:	195b      	adds	r3, r3, r5
 8001502:	eb44 0406 	adc.w	r4, r4, r6
 8001506:	f04f 0100 	mov.w	r1, #0
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	0262      	lsls	r2, r4, #9
 8001510:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001514:	0259      	lsls	r1, r3, #9
 8001516:	460b      	mov	r3, r1
 8001518:	4614      	mov	r4, r2
 800151a:	4618      	mov	r0, r3
 800151c:	4621      	mov	r1, r4
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f04f 0400 	mov.w	r4, #0
 8001524:	461a      	mov	r2, r3
 8001526:	4623      	mov	r3, r4
 8001528:	f7fe fe6c 	bl	8000204 <__aeabi_uldivmod>
 800152c:	4603      	mov	r3, r0
 800152e:	460c      	mov	r4, r1
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e049      	b.n	80015c8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001534:	4b85      	ldr	r3, [pc, #532]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	f04f 0400 	mov.w	r4, #0
 800153e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	ea03 0501 	and.w	r5, r3, r1
 800154a:	ea04 0602 	and.w	r6, r4, r2
 800154e:	4629      	mov	r1, r5
 8001550:	4632      	mov	r2, r6
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	f04f 0400 	mov.w	r4, #0
 800155a:	0154      	lsls	r4, r2, #5
 800155c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001560:	014b      	lsls	r3, r1, #5
 8001562:	4619      	mov	r1, r3
 8001564:	4622      	mov	r2, r4
 8001566:	1b49      	subs	r1, r1, r5
 8001568:	eb62 0206 	sbc.w	r2, r2, r6
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	f04f 0400 	mov.w	r4, #0
 8001574:	0194      	lsls	r4, r2, #6
 8001576:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800157a:	018b      	lsls	r3, r1, #6
 800157c:	1a5b      	subs	r3, r3, r1
 800157e:	eb64 0402 	sbc.w	r4, r4, r2
 8001582:	f04f 0100 	mov.w	r1, #0
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	00e2      	lsls	r2, r4, #3
 800158c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001590:	00d9      	lsls	r1, r3, #3
 8001592:	460b      	mov	r3, r1
 8001594:	4614      	mov	r4, r2
 8001596:	195b      	adds	r3, r3, r5
 8001598:	eb44 0406 	adc.w	r4, r4, r6
 800159c:	f04f 0100 	mov.w	r1, #0
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	02a2      	lsls	r2, r4, #10
 80015a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015aa:	0299      	lsls	r1, r3, #10
 80015ac:	460b      	mov	r3, r1
 80015ae:	4614      	mov	r4, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	4621      	mov	r1, r4
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f04f 0400 	mov.w	r4, #0
 80015ba:	461a      	mov	r2, r3
 80015bc:	4623      	mov	r3, r4
 80015be:	f7fe fe21 	bl	8000204 <__aeabi_uldivmod>
 80015c2:	4603      	mov	r3, r0
 80015c4:	460c      	mov	r4, r1
 80015c6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015c8:	4b60      	ldr	r3, [pc, #384]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	3301      	adds	r3, #1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	613b      	str	r3, [r7, #16]
      break;
 80015e2:	e0ae      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015ec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d04a      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	099b      	lsrs	r3, r3, #6
 8001600:	f04f 0400 	mov.w	r4, #0
 8001604:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	ea03 0501 	and.w	r5, r3, r1
 8001610:	ea04 0602 	and.w	r6, r4, r2
 8001614:	4629      	mov	r1, r5
 8001616:	4632      	mov	r2, r6
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	f04f 0400 	mov.w	r4, #0
 8001620:	0154      	lsls	r4, r2, #5
 8001622:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001626:	014b      	lsls	r3, r1, #5
 8001628:	4619      	mov	r1, r3
 800162a:	4622      	mov	r2, r4
 800162c:	1b49      	subs	r1, r1, r5
 800162e:	eb62 0206 	sbc.w	r2, r2, r6
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	f04f 0400 	mov.w	r4, #0
 800163a:	0194      	lsls	r4, r2, #6
 800163c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001640:	018b      	lsls	r3, r1, #6
 8001642:	1a5b      	subs	r3, r3, r1
 8001644:	eb64 0402 	sbc.w	r4, r4, r2
 8001648:	f04f 0100 	mov.w	r1, #0
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	00e2      	lsls	r2, r4, #3
 8001652:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001656:	00d9      	lsls	r1, r3, #3
 8001658:	460b      	mov	r3, r1
 800165a:	4614      	mov	r4, r2
 800165c:	195b      	adds	r3, r3, r5
 800165e:	eb44 0406 	adc.w	r4, r4, r6
 8001662:	f04f 0100 	mov.w	r1, #0
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	0262      	lsls	r2, r4, #9
 800166c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001670:	0259      	lsls	r1, r3, #9
 8001672:	460b      	mov	r3, r1
 8001674:	4614      	mov	r4, r2
 8001676:	4618      	mov	r0, r3
 8001678:	4621      	mov	r1, r4
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f04f 0400 	mov.w	r4, #0
 8001680:	461a      	mov	r2, r3
 8001682:	4623      	mov	r3, r4
 8001684:	f7fe fdbe 	bl	8000204 <__aeabi_uldivmod>
 8001688:	4603      	mov	r3, r0
 800168a:	460c      	mov	r4, r1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e049      	b.n	8001724 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	f04f 0400 	mov.w	r4, #0
 800169a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	ea03 0501 	and.w	r5, r3, r1
 80016a6:	ea04 0602 	and.w	r6, r4, r2
 80016aa:	4629      	mov	r1, r5
 80016ac:	4632      	mov	r2, r6
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	f04f 0400 	mov.w	r4, #0
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016bc:	014b      	lsls	r3, r1, #5
 80016be:	4619      	mov	r1, r3
 80016c0:	4622      	mov	r2, r4
 80016c2:	1b49      	subs	r1, r1, r5
 80016c4:	eb62 0206 	sbc.w	r2, r2, r6
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	f04f 0400 	mov.w	r4, #0
 80016d0:	0194      	lsls	r4, r2, #6
 80016d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016d6:	018b      	lsls	r3, r1, #6
 80016d8:	1a5b      	subs	r3, r3, r1
 80016da:	eb64 0402 	sbc.w	r4, r4, r2
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	00e2      	lsls	r2, r4, #3
 80016e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016ec:	00d9      	lsls	r1, r3, #3
 80016ee:	460b      	mov	r3, r1
 80016f0:	4614      	mov	r4, r2
 80016f2:	195b      	adds	r3, r3, r5
 80016f4:	eb44 0406 	adc.w	r4, r4, r6
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	02a2      	lsls	r2, r4, #10
 8001702:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001706:	0299      	lsls	r1, r3, #10
 8001708:	460b      	mov	r3, r1
 800170a:	4614      	mov	r4, r2
 800170c:	4618      	mov	r0, r3
 800170e:	4621      	mov	r1, r4
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f04f 0400 	mov.w	r4, #0
 8001716:	461a      	mov	r2, r3
 8001718:	4623      	mov	r3, r4
 800171a:	f7fe fd73 	bl	8000204 <__aeabi_uldivmod>
 800171e:	4603      	mov	r3, r0
 8001720:	460c      	mov	r4, r1
 8001722:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_GetSysClockFreq+0x334>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	0f1b      	lsrs	r3, r3, #28
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	613b      	str	r3, [r7, #16]
      break;
 800173a:	e002      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <HAL_RCC_GetSysClockFreq+0x338>)
 800173e:	613b      	str	r3, [r7, #16]
      break;
 8001740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001742:	693b      	ldr	r3, [r7, #16]
}
 8001744:	4618      	mov	r0, r3
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174c:	40023800 	.word	0x40023800
 8001750:	00f42400 	.word	0x00f42400
 8001754:	007a1200 	.word	0x007a1200

08001758 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8083 	beq.w	8001878 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001772:	4b95      	ldr	r3, [pc, #596]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b04      	cmp	r3, #4
 800177c:	d019      	beq.n	80017b2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800177e:	4b92      	ldr	r3, [pc, #584]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001786:	2b08      	cmp	r3, #8
 8001788:	d106      	bne.n	8001798 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800178a:	4b8f      	ldr	r3, [pc, #572]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001796:	d00c      	beq.n	80017b2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001798:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d112      	bne.n	80017ca <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017a4:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b0:	d10b      	bne.n	80017ca <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b2:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d05b      	beq.n	8001876 <HAL_RCC_OscConfig+0x11e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d157      	bne.n	8001876 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e216      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d2:	d106      	bne.n	80017e2 <HAL_RCC_OscConfig+0x8a>
 80017d4:	4b7c      	ldr	r3, [pc, #496]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a7b      	ldr	r2, [pc, #492]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	e01d      	b.n	800181e <HAL_RCC_OscConfig+0xc6>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_OscConfig+0xae>
 80017ec:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a75      	ldr	r2, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	4b73      	ldr	r3, [pc, #460]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a72      	ldr	r2, [pc, #456]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e00b      	b.n	800181e <HAL_RCC_OscConfig+0xc6>
 8001806:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6f      	ldr	r2, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800180c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6c      	ldr	r2, [pc, #432]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800181c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d013      	beq.n	800184e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff f9d7 	bl	8000bd8 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182e:	f7ff f9d3 	bl	8000bd8 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b64      	cmp	r3, #100	; 0x64
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1db      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001840:	4b61      	ldr	r3, [pc, #388]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0xd6>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7ff f9c3 	bl	8000bd8 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001856:	f7ff f9bf 	bl	8000bd8 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	; 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1c7      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001868:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0xfe>
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d06f      	beq.n	8001964 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001884:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b00      	cmp	r3, #0
 800188e:	d017      	beq.n	80018c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001890:	4b4d      	ldr	r3, [pc, #308]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001898:	2b08      	cmp	r3, #8
 800189a:	d105      	bne.n	80018a8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800189c:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00b      	beq.n	80018c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a8:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018b0:	2b0c      	cmp	r3, #12
 80018b2:	d11c      	bne.n	80018ee <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d116      	bne.n	80018ee <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c0:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_OscConfig+0x180>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e18f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d8:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4938      	ldr	r1, [pc, #224]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ec:	e03a      	b.n	8001964 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d020      	beq.n	8001938 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f96c 	bl	8000bd8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001904:	f7ff f968 	bl	8000bd8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e170      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4925      	ldr	r1, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
 8001936:	e015      	b.n	8001964 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff f94b 	bl	8000bd8 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff f947 	bl	8000bd8 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e14f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	2b00      	cmp	r3, #0
 800196e:	d037      	beq.n	80019e0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d016      	beq.n	80019a6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x278>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff f92b 	bl	8000bd8 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff f927 	bl	8000bd8 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e12f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x270>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x22e>
 80019a4:	e01c      	b.n	80019e0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_RCC_OscConfig+0x278>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff f914 	bl	8000bd8 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b2:	e00f      	b.n	80019d4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b4:	f7ff f910 	bl	8000bd8 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d908      	bls.n	80019d4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e118      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	42470000 	.word	0x42470000
 80019d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b8a      	ldr	r3, [pc, #552]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e9      	bne.n	80019b4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8097 	beq.w	8001b1c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b83      	ldr	r3, [pc, #524]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b7f      	ldr	r3, [pc, #508]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a7e      	ldr	r2, [pc, #504]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b79      	ldr	r3, [pc, #484]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b76      	ldr	r3, [pc, #472]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a75      	ldr	r2, [pc, #468]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff f8cf 	bl	8000bd8 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff f8cb 	bl	8000bd8 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e0d3      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b6c      	ldr	r3, [pc, #432]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x31a>
 8001a64:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a65      	ldr	r2, [pc, #404]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x354>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x33c>
 8001a7a:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a60      	ldr	r2, [pc, #384]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	4b5e      	ldr	r3, [pc, #376]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a5d      	ldr	r2, [pc, #372]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0x354>
 8001a94:	4b5a      	ldr	r3, [pc, #360]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a59      	ldr	r2, [pc, #356]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	4b57      	ldr	r3, [pc, #348]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a56      	ldr	r2, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001aa6:	f023 0304 	bic.w	r3, r3, #4
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d015      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f890 	bl	8000bd8 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff f88c 	bl	8000bd8 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e092      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ee      	beq.n	8001abc <HAL_RCC_OscConfig+0x364>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f87a 	bl	8000bd8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f876 	bl	8000bd8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e07c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	4b40      	ldr	r3, [pc, #256]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ee      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b3b      	ldr	r3, [pc, #236]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a3a      	ldr	r2, [pc, #232]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d068      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b24:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d060      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d145      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f84b 	bl	8000bd8 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff f847 	bl	8000bd8 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e04f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	019b      	lsls	r3, r3, #6
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	041b      	lsls	r3, r3, #16
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	071b      	lsls	r3, r3, #28
 8001b90:	491b      	ldr	r1, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f81c 	bl	8000bd8 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff f818 	bl	8000bd8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e020      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x44c>
 8001bc2:	e018      	b.n	8001bf6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f805 	bl	8000bd8 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd2:	f7ff f801 	bl	8000bd8 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e009      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <HAL_RCC_OscConfig+0x4a8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x47a>
 8001bf0:	e001      	b.n	8001bf6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000
 8001c08:	42470060 	.word	0x42470060

08001c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e01d      	b.n	8001c5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fe48 	bl	80008c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 f95e 	bl	8001f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b085      	sub	sp, #20
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b06      	cmp	r3, #6
 8001c8a:	d007      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d122      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d11b      	bne.n	8001d06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0202 	mvn.w	r2, #2
 8001cd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8ee 	bl	8001ece <HAL_TIM_IC_CaptureCallback>
 8001cf2:	e005      	b.n	8001d00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8e0 	bl	8001eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8f1 	bl	8001ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d122      	bne.n	8001d5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d11b      	bne.n	8001d5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0204 	mvn.w	r2, #4
 8001d2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f8c4 	bl	8001ece <HAL_TIM_IC_CaptureCallback>
 8001d46:	e005      	b.n	8001d54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f8b6 	bl	8001eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8c7 	bl	8001ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d122      	bne.n	8001dae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d11b      	bne.n	8001dae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f06f 0208 	mvn.w	r2, #8
 8001d7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2204      	movs	r2, #4
 8001d84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f89a 	bl	8001ece <HAL_TIM_IC_CaptureCallback>
 8001d9a:	e005      	b.n	8001da8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f88c 	bl	8001eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f89d 	bl	8001ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d122      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d11b      	bne.n	8001e02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f06f 0210 	mvn.w	r2, #16
 8001dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f870 	bl	8001ece <HAL_TIM_IC_CaptureCallback>
 8001dee:	e005      	b.n	8001dfc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f862 	bl	8001eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f873 	bl	8001ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10e      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d107      	bne.n	8001e2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f06f 0201 	mvn.w	r2, #1
 8001e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7fe fcf5 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e38:	2b80      	cmp	r3, #128	; 0x80
 8001e3a:	d10e      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e46:	2b80      	cmp	r3, #128	; 0x80
 8001e48:	d107      	bne.n	8001e5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f903 	bl	8002060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b40      	cmp	r3, #64	; 0x40
 8001e66:	d10e      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b40      	cmp	r3, #64	; 0x40
 8001e74:	d107      	bne.n	8001e86 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f838 	bl	8001ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	f003 0320 	and.w	r3, r3, #32
 8001e90:	2b20      	cmp	r3, #32
 8001e92:	d10e      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d107      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f06f 0220 	mvn.w	r2, #32
 8001eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8cd 	bl	800204c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a40      	ldr	r2, [pc, #256]	; (8002020 <TIM_Base_SetConfig+0x114>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2a:	d00f      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3d      	ldr	r2, [pc, #244]	; (8002024 <TIM_Base_SetConfig+0x118>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d00b      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3c      	ldr	r2, [pc, #240]	; (8002028 <TIM_Base_SetConfig+0x11c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d007      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a3b      	ldr	r2, [pc, #236]	; (800202c <TIM_Base_SetConfig+0x120>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d003      	beq.n	8001f4c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3a      	ldr	r2, [pc, #232]	; (8002030 <TIM_Base_SetConfig+0x124>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d108      	bne.n	8001f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a2f      	ldr	r2, [pc, #188]	; (8002020 <TIM_Base_SetConfig+0x114>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d02b      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6c:	d027      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2c      	ldr	r2, [pc, #176]	; (8002024 <TIM_Base_SetConfig+0x118>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d023      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2b      	ldr	r2, [pc, #172]	; (8002028 <TIM_Base_SetConfig+0x11c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d01f      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2a      	ldr	r2, [pc, #168]	; (800202c <TIM_Base_SetConfig+0x120>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01b      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a29      	ldr	r2, [pc, #164]	; (8002030 <TIM_Base_SetConfig+0x124>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d017      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a28      	ldr	r2, [pc, #160]	; (8002034 <TIM_Base_SetConfig+0x128>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a27      	ldr	r2, [pc, #156]	; (8002038 <TIM_Base_SetConfig+0x12c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00f      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <TIM_Base_SetConfig+0x130>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00b      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a25      	ldr	r2, [pc, #148]	; (8002040 <TIM_Base_SetConfig+0x134>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a24      	ldr	r2, [pc, #144]	; (8002044 <TIM_Base_SetConfig+0x138>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d003      	beq.n	8001fbe <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a23      	ldr	r2, [pc, #140]	; (8002048 <TIM_Base_SetConfig+0x13c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d108      	bne.n	8001fd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <TIM_Base_SetConfig+0x114>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d003      	beq.n	8002004 <TIM_Base_SetConfig+0xf8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <TIM_Base_SetConfig+0x124>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d103      	bne.n	800200c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	615a      	str	r2, [r3, #20]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40010000 	.word	0x40010000
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40010400 	.word	0x40010400
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800
 8002040:	40001800 	.word	0x40001800
 8002044:	40001c00 	.word	0x40001c00
 8002048:	40002000 	.word	0x40002000

0800204c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e03f      	b.n	8002106 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fc5a 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2224      	movs	r2, #36	; 0x24
 80020a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fa69 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695a      	ldr	r2, [r3, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10d      	bne.n	8002162 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_UART_IRQHandler+0x52>
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f996 	bl	800248c <UART_Receive_IT>
      return;
 8002160:	e0d1      	b.n	8002306 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80b0 	beq.w	80022ca <HAL_UART_IRQHandler+0x1ba>
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d105      	bne.n	8002180 <HAL_UART_IRQHandler+0x70>
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80a5 	beq.w	80022ca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_UART_IRQHandler+0x90>
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	f043 0201 	orr.w	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00a      	beq.n	80021c0 <HAL_UART_IRQHandler+0xb0>
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	f043 0202 	orr.w	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_UART_IRQHandler+0xd0>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d8:	f043 0204 	orr.w	r2, r3, #4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00f      	beq.n	800220a <HAL_UART_IRQHandler+0xfa>
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <HAL_UART_IRQHandler+0xee>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d005      	beq.n	800220a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002202:	f043 0208 	orr.w	r2, r3, #8
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	2b00      	cmp	r3, #0
 8002210:	d078      	beq.n	8002304 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0320 	and.w	r3, r3, #32
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_UART_IRQHandler+0x11c>
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f930 	bl	800248c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b40      	cmp	r3, #64	; 0x40
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_UART_IRQHandler+0x144>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d031      	beq.n	80022b8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f879 	bl	800234c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d123      	bne.n	80022b0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002276:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227c:	2b00      	cmp	r3, #0
 800227e:	d013      	beq.n	80022a8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002284:	4a21      	ldr	r2, [pc, #132]	; (800230c <HAL_UART_IRQHandler+0x1fc>)
 8002286:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fdc0 	bl	8000e12 <HAL_DMA_Abort_IT>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d016      	beq.n	80022c6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022a2:	4610      	mov	r0, r2
 80022a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022a6:	e00e      	b.n	80022c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f845 	bl	8002338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ae:	e00a      	b.n	80022c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f841 	bl	8002338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022b6:	e006      	b.n	80022c6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f83d 	bl	8002338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80022c4:	e01e      	b.n	8002304 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c6:	bf00      	nop
    return;
 80022c8:	e01c      	b.n	8002304 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_UART_IRQHandler+0x1d6>
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f866 	bl	80023b0 <UART_Transmit_IT>
    return;
 80022e4:	e00f      	b.n	8002306 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_UART_IRQHandler+0x1f6>
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d005      	beq.n	8002306 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f8ae 	bl	800245c <UART_EndTransmit_IT>
    return;
 8002300:	bf00      	nop
 8002302:	e000      	b.n	8002306 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002304:	bf00      	nop
  }
}
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	08002389 	.word	0x08002389

08002310 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002362:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2220      	movs	r2, #32
 8002378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff ffc8 	bl	8002338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b21      	cmp	r3, #33	; 0x21
 80023c2:	d144      	bne.n	800244e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023cc:	d11a      	bne.n	8002404 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	1c9a      	adds	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	621a      	str	r2, [r3, #32]
 80023f6:	e00e      	b.n	8002416 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	621a      	str	r2, [r3, #32]
 8002402:	e008      	b.n	8002416 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	1c59      	adds	r1, r3, #1
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6211      	str	r1, [r2, #32]
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29b      	uxth	r3, r3
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4619      	mov	r1, r3
 8002424:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002438:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002448:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002472:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff47 	bl	8002310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b22      	cmp	r3, #34	; 0x22
 800249e:	d171      	bne.n	8002584 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a8:	d123      	bne.n	80024f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10e      	bne.n	80024d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	1c9a      	adds	r2, r3, #2
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
 80024d4:	e029      	b.n	800252a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
 80024f0:	e01b      	b.n	800252a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6858      	ldr	r0, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	1c59      	adds	r1, r3, #1
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6291      	str	r1, [r2, #40]	; 0x28
 800250a:	b2c2      	uxtb	r2, r0
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e00c      	b.n	800252a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	1c58      	adds	r0, r3, #1
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	6288      	str	r0, [r1, #40]	; 0x28
 8002522:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29b      	uxth	r3, r3
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	4619      	mov	r1, r3
 8002538:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800253a:	2b00      	cmp	r3, #0
 800253c:	d120      	bne.n	8002580 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0220 	bic.w	r2, r2, #32
 800254c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800255c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff fed4 	bl	8002324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e002      	b.n	8002586 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025d2:	f023 030c 	bic.w	r3, r3, #12
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	68f9      	ldr	r1, [r7, #12]
 80025dc:	430b      	orrs	r3, r1
 80025de:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fe:	f040 818b 	bne.w	8002918 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4ac1      	ldr	r2, [pc, #772]	; (800290c <UART_SetConfig+0x37c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d005      	beq.n	8002618 <UART_SetConfig+0x88>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4abf      	ldr	r2, [pc, #764]	; (8002910 <UART_SetConfig+0x380>)
 8002612:	4293      	cmp	r3, r2
 8002614:	f040 80bd 	bne.w	8002792 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002618:	f7fe feea 	bl	80013f0 <HAL_RCC_GetPCLK2Freq>
 800261c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	461d      	mov	r5, r3
 8002622:	f04f 0600 	mov.w	r6, #0
 8002626:	46a8      	mov	r8, r5
 8002628:	46b1      	mov	r9, r6
 800262a:	eb18 0308 	adds.w	r3, r8, r8
 800262e:	eb49 0409 	adc.w	r4, r9, r9
 8002632:	4698      	mov	r8, r3
 8002634:	46a1      	mov	r9, r4
 8002636:	eb18 0805 	adds.w	r8, r8, r5
 800263a:	eb49 0906 	adc.w	r9, r9, r6
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800264a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800264e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002652:	4688      	mov	r8, r1
 8002654:	4691      	mov	r9, r2
 8002656:	eb18 0005 	adds.w	r0, r8, r5
 800265a:	eb49 0106 	adc.w	r1, r9, r6
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	461d      	mov	r5, r3
 8002664:	f04f 0600 	mov.w	r6, #0
 8002668:	196b      	adds	r3, r5, r5
 800266a:	eb46 0406 	adc.w	r4, r6, r6
 800266e:	461a      	mov	r2, r3
 8002670:	4623      	mov	r3, r4
 8002672:	f7fd fdc7 	bl	8000204 <__aeabi_uldivmod>
 8002676:	4603      	mov	r3, r0
 8002678:	460c      	mov	r4, r1
 800267a:	461a      	mov	r2, r3
 800267c:	4ba5      	ldr	r3, [pc, #660]	; (8002914 <UART_SetConfig+0x384>)
 800267e:	fba3 2302 	umull	r2, r3, r3, r2
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	461d      	mov	r5, r3
 800268c:	f04f 0600 	mov.w	r6, #0
 8002690:	46a9      	mov	r9, r5
 8002692:	46b2      	mov	sl, r6
 8002694:	eb19 0309 	adds.w	r3, r9, r9
 8002698:	eb4a 040a 	adc.w	r4, sl, sl
 800269c:	4699      	mov	r9, r3
 800269e:	46a2      	mov	sl, r4
 80026a0:	eb19 0905 	adds.w	r9, r9, r5
 80026a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80026a8:	f04f 0100 	mov.w	r1, #0
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026bc:	4689      	mov	r9, r1
 80026be:	4692      	mov	sl, r2
 80026c0:	eb19 0005 	adds.w	r0, r9, r5
 80026c4:	eb4a 0106 	adc.w	r1, sl, r6
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	461d      	mov	r5, r3
 80026ce:	f04f 0600 	mov.w	r6, #0
 80026d2:	196b      	adds	r3, r5, r5
 80026d4:	eb46 0406 	adc.w	r4, r6, r6
 80026d8:	461a      	mov	r2, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	f7fd fd92 	bl	8000204 <__aeabi_uldivmod>
 80026e0:	4603      	mov	r3, r0
 80026e2:	460c      	mov	r4, r1
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <UART_SetConfig+0x384>)
 80026e8:	fba3 1302 	umull	r1, r3, r3, r2
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	2164      	movs	r1, #100	; 0x64
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	3332      	adds	r3, #50	; 0x32
 80026fa:	4a86      	ldr	r2, [pc, #536]	; (8002914 <UART_SetConfig+0x384>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	095b      	lsrs	r3, r3, #5
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002708:	4498      	add	r8, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	461d      	mov	r5, r3
 800270e:	f04f 0600 	mov.w	r6, #0
 8002712:	46a9      	mov	r9, r5
 8002714:	46b2      	mov	sl, r6
 8002716:	eb19 0309 	adds.w	r3, r9, r9
 800271a:	eb4a 040a 	adc.w	r4, sl, sl
 800271e:	4699      	mov	r9, r3
 8002720:	46a2      	mov	sl, r4
 8002722:	eb19 0905 	adds.w	r9, r9, r5
 8002726:	eb4a 0a06 	adc.w	sl, sl, r6
 800272a:	f04f 0100 	mov.w	r1, #0
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002736:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800273a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800273e:	4689      	mov	r9, r1
 8002740:	4692      	mov	sl, r2
 8002742:	eb19 0005 	adds.w	r0, r9, r5
 8002746:	eb4a 0106 	adc.w	r1, sl, r6
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	461d      	mov	r5, r3
 8002750:	f04f 0600 	mov.w	r6, #0
 8002754:	196b      	adds	r3, r5, r5
 8002756:	eb46 0406 	adc.w	r4, r6, r6
 800275a:	461a      	mov	r2, r3
 800275c:	4623      	mov	r3, r4
 800275e:	f7fd fd51 	bl	8000204 <__aeabi_uldivmod>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	461a      	mov	r2, r3
 8002768:	4b6a      	ldr	r3, [pc, #424]	; (8002914 <UART_SetConfig+0x384>)
 800276a:	fba3 1302 	umull	r1, r3, r3, r2
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2164      	movs	r1, #100	; 0x64
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	3332      	adds	r3, #50	; 0x32
 800277c:	4a65      	ldr	r2, [pc, #404]	; (8002914 <UART_SetConfig+0x384>)
 800277e:	fba2 2303 	umull	r2, r3, r2, r3
 8002782:	095b      	lsrs	r3, r3, #5
 8002784:	f003 0207 	and.w	r2, r3, #7
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4442      	add	r2, r8
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	e26f      	b.n	8002c72 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002792:	f7fe fe19 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8002796:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	461d      	mov	r5, r3
 800279c:	f04f 0600 	mov.w	r6, #0
 80027a0:	46a8      	mov	r8, r5
 80027a2:	46b1      	mov	r9, r6
 80027a4:	eb18 0308 	adds.w	r3, r8, r8
 80027a8:	eb49 0409 	adc.w	r4, r9, r9
 80027ac:	4698      	mov	r8, r3
 80027ae:	46a1      	mov	r9, r4
 80027b0:	eb18 0805 	adds.w	r8, r8, r5
 80027b4:	eb49 0906 	adc.w	r9, r9, r6
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027cc:	4688      	mov	r8, r1
 80027ce:	4691      	mov	r9, r2
 80027d0:	eb18 0005 	adds.w	r0, r8, r5
 80027d4:	eb49 0106 	adc.w	r1, r9, r6
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	461d      	mov	r5, r3
 80027de:	f04f 0600 	mov.w	r6, #0
 80027e2:	196b      	adds	r3, r5, r5
 80027e4:	eb46 0406 	adc.w	r4, r6, r6
 80027e8:	461a      	mov	r2, r3
 80027ea:	4623      	mov	r3, r4
 80027ec:	f7fd fd0a 	bl	8000204 <__aeabi_uldivmod>
 80027f0:	4603      	mov	r3, r0
 80027f2:	460c      	mov	r4, r1
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <UART_SetConfig+0x384>)
 80027f8:	fba3 2302 	umull	r2, r3, r3, r2
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	461d      	mov	r5, r3
 8002806:	f04f 0600 	mov.w	r6, #0
 800280a:	46a9      	mov	r9, r5
 800280c:	46b2      	mov	sl, r6
 800280e:	eb19 0309 	adds.w	r3, r9, r9
 8002812:	eb4a 040a 	adc.w	r4, sl, sl
 8002816:	4699      	mov	r9, r3
 8002818:	46a2      	mov	sl, r4
 800281a:	eb19 0905 	adds.w	r9, r9, r5
 800281e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002832:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002836:	4689      	mov	r9, r1
 8002838:	4692      	mov	sl, r2
 800283a:	eb19 0005 	adds.w	r0, r9, r5
 800283e:	eb4a 0106 	adc.w	r1, sl, r6
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	461d      	mov	r5, r3
 8002848:	f04f 0600 	mov.w	r6, #0
 800284c:	196b      	adds	r3, r5, r5
 800284e:	eb46 0406 	adc.w	r4, r6, r6
 8002852:	461a      	mov	r2, r3
 8002854:	4623      	mov	r3, r4
 8002856:	f7fd fcd5 	bl	8000204 <__aeabi_uldivmod>
 800285a:	4603      	mov	r3, r0
 800285c:	460c      	mov	r4, r1
 800285e:	461a      	mov	r2, r3
 8002860:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <UART_SetConfig+0x384>)
 8002862:	fba3 1302 	umull	r1, r3, r3, r2
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2164      	movs	r1, #100	; 0x64
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	3332      	adds	r3, #50	; 0x32
 8002874:	4a27      	ldr	r2, [pc, #156]	; (8002914 <UART_SetConfig+0x384>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	095b      	lsrs	r3, r3, #5
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002882:	4498      	add	r8, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	461d      	mov	r5, r3
 8002888:	f04f 0600 	mov.w	r6, #0
 800288c:	46a9      	mov	r9, r5
 800288e:	46b2      	mov	sl, r6
 8002890:	eb19 0309 	adds.w	r3, r9, r9
 8002894:	eb4a 040a 	adc.w	r4, sl, sl
 8002898:	4699      	mov	r9, r3
 800289a:	46a2      	mov	sl, r4
 800289c:	eb19 0905 	adds.w	r9, r9, r5
 80028a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028b8:	4689      	mov	r9, r1
 80028ba:	4692      	mov	sl, r2
 80028bc:	eb19 0005 	adds.w	r0, r9, r5
 80028c0:	eb4a 0106 	adc.w	r1, sl, r6
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	461d      	mov	r5, r3
 80028ca:	f04f 0600 	mov.w	r6, #0
 80028ce:	196b      	adds	r3, r5, r5
 80028d0:	eb46 0406 	adc.w	r4, r6, r6
 80028d4:	461a      	mov	r2, r3
 80028d6:	4623      	mov	r3, r4
 80028d8:	f7fd fc94 	bl	8000204 <__aeabi_uldivmod>
 80028dc:	4603      	mov	r3, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <UART_SetConfig+0x384>)
 80028e4:	fba3 1302 	umull	r1, r3, r3, r2
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	2164      	movs	r1, #100	; 0x64
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	3332      	adds	r3, #50	; 0x32
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <UART_SetConfig+0x384>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	095b      	lsrs	r3, r3, #5
 80028fe:	f003 0207 	and.w	r2, r3, #7
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4442      	add	r2, r8
 8002908:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800290a:	e1b2      	b.n	8002c72 <UART_SetConfig+0x6e2>
 800290c:	40011000 	.word	0x40011000
 8002910:	40011400 	.word	0x40011400
 8002914:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4ad7      	ldr	r2, [pc, #860]	; (8002c7c <UART_SetConfig+0x6ec>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d005      	beq.n	800292e <UART_SetConfig+0x39e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4ad6      	ldr	r2, [pc, #856]	; (8002c80 <UART_SetConfig+0x6f0>)
 8002928:	4293      	cmp	r3, r2
 800292a:	f040 80d1 	bne.w	8002ad0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800292e:	f7fe fd5f 	bl	80013f0 <HAL_RCC_GetPCLK2Freq>
 8002932:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	469a      	mov	sl, r3
 8002938:	f04f 0b00 	mov.w	fp, #0
 800293c:	46d0      	mov	r8, sl
 800293e:	46d9      	mov	r9, fp
 8002940:	eb18 0308 	adds.w	r3, r8, r8
 8002944:	eb49 0409 	adc.w	r4, r9, r9
 8002948:	4698      	mov	r8, r3
 800294a:	46a1      	mov	r9, r4
 800294c:	eb18 080a 	adds.w	r8, r8, sl
 8002950:	eb49 090b 	adc.w	r9, r9, fp
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002960:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002964:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002968:	4688      	mov	r8, r1
 800296a:	4691      	mov	r9, r2
 800296c:	eb1a 0508 	adds.w	r5, sl, r8
 8002970:	eb4b 0609 	adc.w	r6, fp, r9
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4619      	mov	r1, r3
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	f04f 0400 	mov.w	r4, #0
 8002986:	0094      	lsls	r4, r2, #2
 8002988:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800298c:	008b      	lsls	r3, r1, #2
 800298e:	461a      	mov	r2, r3
 8002990:	4623      	mov	r3, r4
 8002992:	4628      	mov	r0, r5
 8002994:	4631      	mov	r1, r6
 8002996:	f7fd fc35 	bl	8000204 <__aeabi_uldivmod>
 800299a:	4603      	mov	r3, r0
 800299c:	460c      	mov	r4, r1
 800299e:	461a      	mov	r2, r3
 80029a0:	4bb8      	ldr	r3, [pc, #736]	; (8002c84 <UART_SetConfig+0x6f4>)
 80029a2:	fba3 2302 	umull	r2, r3, r3, r2
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	469b      	mov	fp, r3
 80029b0:	f04f 0c00 	mov.w	ip, #0
 80029b4:	46d9      	mov	r9, fp
 80029b6:	46e2      	mov	sl, ip
 80029b8:	eb19 0309 	adds.w	r3, r9, r9
 80029bc:	eb4a 040a 	adc.w	r4, sl, sl
 80029c0:	4699      	mov	r9, r3
 80029c2:	46a2      	mov	sl, r4
 80029c4:	eb19 090b 	adds.w	r9, r9, fp
 80029c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029cc:	f04f 0100 	mov.w	r1, #0
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029e0:	4689      	mov	r9, r1
 80029e2:	4692      	mov	sl, r2
 80029e4:	eb1b 0509 	adds.w	r5, fp, r9
 80029e8:	eb4c 060a 	adc.w	r6, ip, sl
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4619      	mov	r1, r3
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	f04f 0400 	mov.w	r4, #0
 80029fe:	0094      	lsls	r4, r2, #2
 8002a00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a04:	008b      	lsls	r3, r1, #2
 8002a06:	461a      	mov	r2, r3
 8002a08:	4623      	mov	r3, r4
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	4631      	mov	r1, r6
 8002a0e:	f7fd fbf9 	bl	8000204 <__aeabi_uldivmod>
 8002a12:	4603      	mov	r3, r0
 8002a14:	460c      	mov	r4, r1
 8002a16:	461a      	mov	r2, r3
 8002a18:	4b9a      	ldr	r3, [pc, #616]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2164      	movs	r1, #100	; 0x64
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	3332      	adds	r3, #50	; 0x32
 8002a2c:	4a95      	ldr	r2, [pc, #596]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a38:	4498      	add	r8, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	469b      	mov	fp, r3
 8002a3e:	f04f 0c00 	mov.w	ip, #0
 8002a42:	46d9      	mov	r9, fp
 8002a44:	46e2      	mov	sl, ip
 8002a46:	eb19 0309 	adds.w	r3, r9, r9
 8002a4a:	eb4a 040a 	adc.w	r4, sl, sl
 8002a4e:	4699      	mov	r9, r3
 8002a50:	46a2      	mov	sl, r4
 8002a52:	eb19 090b 	adds.w	r9, r9, fp
 8002a56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a6e:	4689      	mov	r9, r1
 8002a70:	4692      	mov	sl, r2
 8002a72:	eb1b 0509 	adds.w	r5, fp, r9
 8002a76:	eb4c 060a 	adc.w	r6, ip, sl
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	0094      	lsls	r4, r2, #2
 8002a8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a92:	008b      	lsls	r3, r1, #2
 8002a94:	461a      	mov	r2, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	4628      	mov	r0, r5
 8002a9a:	4631      	mov	r1, r6
 8002a9c:	f7fd fbb2 	bl	8000204 <__aeabi_uldivmod>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b77      	ldr	r3, [pc, #476]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	2164      	movs	r1, #100	; 0x64
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	3332      	adds	r3, #50	; 0x32
 8002aba:	4a72      	ldr	r2, [pc, #456]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	f003 020f 	and.w	r2, r3, #15
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4442      	add	r2, r8
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	e0d0      	b.n	8002c72 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ad0:	f7fe fc7a 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8002ad4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	469a      	mov	sl, r3
 8002ada:	f04f 0b00 	mov.w	fp, #0
 8002ade:	46d0      	mov	r8, sl
 8002ae0:	46d9      	mov	r9, fp
 8002ae2:	eb18 0308 	adds.w	r3, r8, r8
 8002ae6:	eb49 0409 	adc.w	r4, r9, r9
 8002aea:	4698      	mov	r8, r3
 8002aec:	46a1      	mov	r9, r4
 8002aee:	eb18 080a 	adds.w	r8, r8, sl
 8002af2:	eb49 090b 	adc.w	r9, r9, fp
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b02:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b06:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b0a:	4688      	mov	r8, r1
 8002b0c:	4691      	mov	r9, r2
 8002b0e:	eb1a 0508 	adds.w	r5, sl, r8
 8002b12:	eb4b 0609 	adc.w	r6, fp, r9
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	f04f 0400 	mov.w	r4, #0
 8002b28:	0094      	lsls	r4, r2, #2
 8002b2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b2e:	008b      	lsls	r3, r1, #2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4623      	mov	r3, r4
 8002b34:	4628      	mov	r0, r5
 8002b36:	4631      	mov	r1, r6
 8002b38:	f7fd fb64 	bl	8000204 <__aeabi_uldivmod>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	460c      	mov	r4, r1
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002b44:	fba3 2302 	umull	r2, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	469b      	mov	fp, r3
 8002b52:	f04f 0c00 	mov.w	ip, #0
 8002b56:	46d9      	mov	r9, fp
 8002b58:	46e2      	mov	sl, ip
 8002b5a:	eb19 0309 	adds.w	r3, r9, r9
 8002b5e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b62:	4699      	mov	r9, r3
 8002b64:	46a2      	mov	sl, r4
 8002b66:	eb19 090b 	adds.w	r9, r9, fp
 8002b6a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b82:	4689      	mov	r9, r1
 8002b84:	4692      	mov	sl, r2
 8002b86:	eb1b 0509 	adds.w	r5, fp, r9
 8002b8a:	eb4c 060a 	adc.w	r6, ip, sl
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4619      	mov	r1, r3
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	0094      	lsls	r4, r2, #2
 8002ba2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ba6:	008b      	lsls	r3, r1, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	4628      	mov	r0, r5
 8002bae:	4631      	mov	r1, r6
 8002bb0:	f7fd fb28 	bl	8000204 <__aeabi_uldivmod>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	460c      	mov	r4, r1
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	2164      	movs	r1, #100	; 0x64
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	3332      	adds	r3, #50	; 0x32
 8002bce:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bda:	4498      	add	r8, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	469b      	mov	fp, r3
 8002be0:	f04f 0c00 	mov.w	ip, #0
 8002be4:	46d9      	mov	r9, fp
 8002be6:	46e2      	mov	sl, ip
 8002be8:	eb19 0309 	adds.w	r3, r9, r9
 8002bec:	eb4a 040a 	adc.w	r4, sl, sl
 8002bf0:	4699      	mov	r9, r3
 8002bf2:	46a2      	mov	sl, r4
 8002bf4:	eb19 090b 	adds.w	r9, r9, fp
 8002bf8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bfc:	f04f 0100 	mov.w	r1, #0
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c10:	4689      	mov	r9, r1
 8002c12:	4692      	mov	sl, r2
 8002c14:	eb1b 0509 	adds.w	r5, fp, r9
 8002c18:	eb4c 060a 	adc.w	r6, ip, sl
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4619      	mov	r1, r3
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	f04f 0400 	mov.w	r4, #0
 8002c2e:	0094      	lsls	r4, r2, #2
 8002c30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c34:	008b      	lsls	r3, r1, #2
 8002c36:	461a      	mov	r2, r3
 8002c38:	4623      	mov	r3, r4
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	4631      	mov	r1, r6
 8002c3e:	f7fd fae1 	bl	8000204 <__aeabi_uldivmod>
 8002c42:	4603      	mov	r3, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2164      	movs	r1, #100	; 0x64
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	3332      	adds	r3, #50	; 0x32
 8002c5c:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <UART_SetConfig+0x6f4>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	f003 020f 	and.w	r2, r3, #15
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4442      	add	r2, r8
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	e7ff      	b.n	8002c72 <UART_SetConfig+0x6e2>
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7c:	40011000 	.word	0x40011000
 8002c80:	40011400 	.word	0x40011400
 8002c84:	51eb851f 	.word	0x51eb851f

08002c88 <__libc_init_array>:
 8002c88:	b570      	push	{r4, r5, r6, lr}
 8002c8a:	4e0d      	ldr	r6, [pc, #52]	; (8002cc0 <__libc_init_array+0x38>)
 8002c8c:	4c0d      	ldr	r4, [pc, #52]	; (8002cc4 <__libc_init_array+0x3c>)
 8002c8e:	1ba4      	subs	r4, r4, r6
 8002c90:	10a4      	asrs	r4, r4, #2
 8002c92:	2500      	movs	r5, #0
 8002c94:	42a5      	cmp	r5, r4
 8002c96:	d109      	bne.n	8002cac <__libc_init_array+0x24>
 8002c98:	4e0b      	ldr	r6, [pc, #44]	; (8002cc8 <__libc_init_array+0x40>)
 8002c9a:	4c0c      	ldr	r4, [pc, #48]	; (8002ccc <__libc_init_array+0x44>)
 8002c9c:	f000 f820 	bl	8002ce0 <_init>
 8002ca0:	1ba4      	subs	r4, r4, r6
 8002ca2:	10a4      	asrs	r4, r4, #2
 8002ca4:	2500      	movs	r5, #0
 8002ca6:	42a5      	cmp	r5, r4
 8002ca8:	d105      	bne.n	8002cb6 <__libc_init_array+0x2e>
 8002caa:	bd70      	pop	{r4, r5, r6, pc}
 8002cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cb0:	4798      	blx	r3
 8002cb2:	3501      	adds	r5, #1
 8002cb4:	e7ee      	b.n	8002c94 <__libc_init_array+0xc>
 8002cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cba:	4798      	blx	r3
 8002cbc:	3501      	adds	r5, #1
 8002cbe:	e7f2      	b.n	8002ca6 <__libc_init_array+0x1e>
 8002cc0:	08002d18 	.word	0x08002d18
 8002cc4:	08002d18 	.word	0x08002d18
 8002cc8:	08002d18 	.word	0x08002d18
 8002ccc:	08002d1c 	.word	0x08002d1c

08002cd0 <memset>:
 8002cd0:	4402      	add	r2, r0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d100      	bne.n	8002cda <memset+0xa>
 8002cd8:	4770      	bx	lr
 8002cda:	f803 1b01 	strb.w	r1, [r3], #1
 8002cde:	e7f9      	b.n	8002cd4 <memset+0x4>

08002ce0 <_init>:
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ce2:	bf00      	nop
 8002ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ce6:	bc08      	pop	{r3}
 8002ce8:	469e      	mov	lr, r3
 8002cea:	4770      	bx	lr

08002cec <_fini>:
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	bf00      	nop
 8002cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf2:	bc08      	pop	{r3}
 8002cf4:	469e      	mov	lr, r3
 8002cf6:	4770      	bx	lr
